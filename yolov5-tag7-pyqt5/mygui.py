# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import yaml
import sys
from pathlib import Path
import cv2
import random
import torch
import numpy as np
import torch.backends.cudnn as cudnn
import qdarkstyle
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from utils.general import check_img_size, non_max_suppression, scale_boxes, increment_path
from utils.augmentations import letterbox
from utils.plots import plot_one_box

from models.common import DetectMultiBackend


FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]  # YOLOv5 root directory
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(Ui_MainWindow, self).__init__(parent)
        self.timer_video = QtCore.QTimer()
        self.setupUi(self)
        self.init_logo()
        self.init_slots()
        self.cap = cv2.VideoCapture()
        self.out = None
        self.device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
        self.half = False

        name = 'exp'
        save_file = 'C:/PythonProject/PycharmProject/yolov5-70--py-qt5-master/result'
        self.save_file = increment_path(Path(save_file) / name, exist_ok=False, mkdir=True)

        cudnn.benchmark = True
        weights = 'C:/PythonProject/PycharmProject/yolov5-70--py-qt5-master/weights/yolov5s.pt'  # 模型加载路径
        #weights = self.button_model_open()
        imgsz = 640  # 预测图尺寸大小
        self.conf_thres = 0.25  # NMS置信度
        self.iou_thres = 0.45  # IOU阈值
        # 载入模型
        self.model = DetectMultiBackend(weights, device=self.device)
        stride = self.model.stride
        self.imgsz = check_img_size(imgsz, s=stride)
        if self.half:
            self.model.half()  # to FP16

        # 从模型中获取各类别名称
        self.names = self.model.names
        # print(self.names)   # 预览初始模型包含的类别
        # 给每一个类别初始化颜色
        self.colors = [[random.randint(0, 255) for _ in range(3)] for _ in self.names]

        self.label_currentpt.setText(weights.split('/')[-1])

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1125, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet("#centralwidget{border-image:url(C:/PythonProject/PycharmProject/yolov5-70--py-qt5-master/UI/xf46.png)}")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_all = QtWidgets.QHBoxLayout()
        self.horizontalLayout_all.setSpacing(0)
        self.horizontalLayout_all.setObjectName("horizontalLayout_all")
        self.verticalLayout_left = QtWidgets.QVBoxLayout()
        self.verticalLayout_left.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_left.setObjectName("verticalLayout_left")
        # 选择权重按钮
        self.pushButton_selectpt = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_selectpt.sizePolicy().hasHeightForWidth())
        self.pushButton_selectpt.setSizePolicy(sizePolicy)
        self.pushButton_selectpt.setMinimumSize(QtCore.QSize(150, 60))
        self.pushButton_selectpt.setMaximumSize(QtCore.QSize(150, 60))
        self.pushButton_selectpt.setStyleSheet(
            "QPushButton{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QPushButton{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QPushButton{border-radius: 6px}"  # 圆角半径
            "QPushButton:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QPushButton:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(12)
        self.pushButton_selectpt.setFont(font)
        self.pushButton_selectpt.setObjectName("pushButton_selectpt")
        self.verticalLayout_left.addWidget(self.pushButton_selectpt)
        self.pushButton_selectpt.setToolTip('<b>请选择权重文件</b>')  # 创建提示框
        # 打开单图片按钮
        self.pushButton_img = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_img.sizePolicy().hasHeightForWidth())
        self.pushButton_img.setSizePolicy(sizePolicy)
        self.pushButton_img.setMinimumSize(QtCore.QSize(150, 60))
        self.pushButton_img.setMaximumSize(QtCore.QSize(150, 60))
        self.pushButton_img.setStyleSheet(
            "QPushButton{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QPushButton{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QPushButton{border-radius: 6px}"  # 圆角半径
            "QPushButton:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QPushButton:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(12)
        self.pushButton_img.setFont(font)
        self.pushButton_img.setObjectName("pushButton_img")
        self.verticalLayout_left.addWidget(self.pushButton_img)
        self.pushButton_img.setToolTip('<b>请选择一张图片进行检测</b>')  # 创建提示框
        # 打开图片文件夹按钮
        self.pushButton_imgfolder = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_imgfolder.sizePolicy().hasHeightForWidth())
        self.pushButton_imgfolder.setSizePolicy(sizePolicy)
        self.pushButton_imgfolder.setMinimumSize(QtCore.QSize(150, 60))
        self.pushButton_imgfolder.setMaximumSize(QtCore.QSize(150, 60))
        self.pushButton_imgfolder.setStyleSheet(
            "QPushButton{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QPushButton{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QPushButton{border-radius: 6px}"  # 圆角半径
            "QPushButton:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QPushButton:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(12)
        self.pushButton_imgfolder.setFont(font)
        self.pushButton_imgfolder.setObjectName("pushButton_imgfolder")
        self.verticalLayout_left.addWidget(self.pushButton_imgfolder)
        self.pushButton_imgfolder.setToolTip('<b>请选择包含所有检测图片的文件夹</b>')  # 创建提示框

        # 打开视频按钮
        self.pushButton_video = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_video.sizePolicy().hasHeightForWidth())
        self.pushButton_video.setSizePolicy(sizePolicy)
        self.pushButton_video.setMinimumSize(QtCore.QSize(150, 60))
        self.pushButton_video.setMaximumSize(QtCore.QSize(150, 60))
        self.pushButton_video.setStyleSheet(
            "QPushButton{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QPushButton{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QPushButton{border-radius: 6px}"  # 圆角半径
            "QPushButton:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QPushButton:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.pushButton_video.setFont(font)
        self.pushButton_video.setObjectName("pushButton_video")
        self.verticalLayout_left.addWidget(self.pushButton_video)
        self.pushButton_video.setToolTip('<b>请选择一个视频进行检测</b>')  # 创建提示框
        # 打开摄像头按钮
        self.pushButton_camera = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_camera.sizePolicy().hasHeightForWidth())
        self.pushButton_camera.setSizePolicy(sizePolicy)
        self.pushButton_camera.setMinimumSize(QtCore.QSize(150, 60))
        self.pushButton_camera.setMaximumSize(QtCore.QSize(150, 60))
        self.pushButton_camera.setStyleSheet(
            "QPushButton{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QPushButton{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QPushButton{border-radius: 6px}"  # 圆角半径
            "QPushButton:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QPushButton:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.pushButton_camera.setFont(font)
        self.pushButton_camera.setObjectName("pushButton_camera")
        self.verticalLayout_left.addWidget(self.pushButton_camera)
        self.pushButton_camera.setToolTip('<b>请确保摄像头设备正常</b>')  # 创建提示框

        # 停止检测按钮
        self.pushButton_stop = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_stop.sizePolicy().hasHeightForWidth())
        self.pushButton_stop.setSizePolicy(sizePolicy)
        self.pushButton_stop.setMinimumSize(QtCore.QSize(150, 60))
        self.pushButton_stop.setMaximumSize(QtCore.QSize(150, 60))
        self.pushButton_stop.setStyleSheet(
            "QPushButton{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QPushButton{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QPushButton{border-radius: 6px}"  # 圆角半径
            "QPushButton:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QPushButton:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.pushButton_stop.setFont(font)
        self.pushButton_stop.setObjectName("pushButton_stop")
        self.verticalLayout_left.addWidget(self.pushButton_stop)
        # 打开保存文件夹按钮
        self.pushButton_savefolder = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_savefolder.sizePolicy().hasHeightForWidth())
        self.pushButton_savefolder.setSizePolicy(sizePolicy)
        self.pushButton_savefolder.setMinimumSize(QtCore.QSize(150, 60))
        self.pushButton_savefolder.setMaximumSize(QtCore.QSize(150, 60))
        self.pushButton_savefolder.setStyleSheet(
            "QPushButton{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QPushButton{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QPushButton{border-radius: 6px}"  # 圆角半径
            "QPushButton:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QPushButton:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.pushButton_savefolder.setFont(font)
        self.pushButton_savefolder.setObjectName("pushButton_savefolder")
        self.verticalLayout_left.addWidget(self.pushButton_savefolder)
        self.pushButton_savefolder.setToolTip('<b>检测后的文件将在此保存</b>')  # 创建提示框

        # 右侧图片/视频填充区域
        self.horizontalLayout_all.addLayout(self.verticalLayout_left)
        self.label_display = QtWidgets.QLabel(self.centralwidget)
        self.label_display.setMinimumSize(QtCore.QSize(700, 0))
        self.label_display.setObjectName("label_display")
        self.horizontalLayout_all.addWidget(self.label_display)
        # self.label_display.setStyleSheet(
        #     "QPushButton{background-color: rgb(111, 180, 219)}"  # 按键背景色
        #     "QPushButton{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
        #     "QPushButton{border-radius: 6px}"  # 圆角半径
        #     "QPushButton:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
        #     "QPushButton:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
        #     # 按下时的样式
        # )
        self.label_display.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框
        self.verticalLayout_rightall = QtWidgets.QVBoxLayout()
        self.verticalLayout_rightall.setObjectName("verticalLayout_rightall")

        # 右上的输出框
        self.label_infooutput = QtWidgets.QLabel(self.centralwidget)
        self.label_infooutput.setMinimumSize(QtCore.QSize(250, 60))
        self.label_infooutput.setMaximumSize(QtCore.QSize(250, 60))
        self.label_infooutput.setObjectName("label_infooutput")
        self.verticalLayout_rightall.addWidget(self.label_infooutput)
        self.label_infooutput.setStyleSheet(
            "QLabel{background-color: rgb(229, 204, 255)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        #self.label_infooutput.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框
        self.verticalLayout_right_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_right_2.setObjectName("verticalLayout_right_2")
        self.horizontalLayout_cls = QtWidgets.QHBoxLayout()
        self.horizontalLayout_cls.setObjectName("horizontalLayout_cls")
        # 预测类别提示框
        self.label_clsleft = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_clsleft.sizePolicy().hasHeightForWidth())
        self.label_clsleft.setSizePolicy(sizePolicy)
        self.label_clsleft.setMinimumSize(QtCore.QSize(100, 60))
        self.label_clsleft.setMaximumSize(QtCore.QSize(100, 60))

        self.label_clsleft.setObjectName("label_clsleft")
        self.horizontalLayout_cls.addWidget(self.label_clsleft)
        self.label_clsleft.setStyleSheet(
            "QLabel{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        # self.label_clsleft.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框
        # 预测类别显示框
        self.label_cls = QtWidgets.QLabel(self.centralwidget)
        self.label_cls.setMinimumSize(QtCore.QSize(130, 60))
        self.label_cls.setMaximumSize(QtCore.QSize(130, 60))
        self.label_cls.setStyleSheet(
            "QLabel{background-color: rgb(255, 204, 229)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_cls.setText("")
        self.label_cls.setObjectName("label_cls")
        self.horizontalLayout_cls.addWidget(self.label_cls)
        #self.label_cls.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框
        self.verticalLayout_right_2.addLayout(self.horizontalLayout_cls)
        self.horizontalLayout_prb = QtWidgets.QHBoxLayout()
        self.horizontalLayout_prb.setObjectName("horizontalLayout_prb")

        # 预测概率提示框
        self.label_prbleft = QtWidgets.QLabel(self.centralwidget)
        self.label_prbleft.setMinimumSize(QtCore.QSize(100, 60))
        self.label_prbleft.setMaximumSize(QtCore.QSize(100, 60))
        self.label_prbleft.setStyleSheet(
            "QLabel{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_prbleft.setObjectName("label_prbleft")
        self.horizontalLayout_prb.addWidget(self.label_prbleft)
        #self.label_prbleft.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框

        # 预测概率显示框
        self.label_prb = QtWidgets.QLabel(self.centralwidget)
        self.label_prb.setMinimumSize(QtCore.QSize(130, 60))
        self.label_prb.setMaximumSize(QtCore.QSize(130, 60))
        self.label_prb.setStyleSheet(
            "QLabel{background-color: rgb(255, 204, 229)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_prb.setText("")
        self.label_prb.setObjectName("label_prb")
        self.horizontalLayout_prb.addWidget(self.label_prb)
        #self.label_prb.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框
        self.verticalLayout_right_2.addLayout(self.horizontalLayout_prb)
        self.horizontalLayout_lefttop = QtWidgets.QHBoxLayout()
        self.horizontalLayout_lefttop.setObjectName("horizontalLayout_lefttop")

        # 左上点坐标提示框
        self.label_lefttop = QtWidgets.QLabel(self.centralwidget)
        self.label_lefttop.setMinimumSize(QtCore.QSize(100, 60))
        self.label_lefttop.setMaximumSize(QtCore.QSize(100, 60))
        self.label_lefttop.setStyleSheet(
            "QLabel{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_lefttop.setObjectName("label_lefttop")
        self.horizontalLayout_lefttop.addWidget(self.label_lefttop)
        #self.label_lefttop.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框

        # 左上点坐标显示框
        self.label_lefttoppos = QtWidgets.QLabel(self.centralwidget)
        self.label_lefttoppos.setMinimumSize(QtCore.QSize(130, 60))
        self.label_lefttoppos.setMaximumSize(QtCore.QSize(130, 60))
        self.label_lefttoppos.setStyleSheet(
            "QLabel{background-color: rgb(255, 204, 229)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_lefttoppos.setText("")
        self.label_lefttoppos.setObjectName("label_lefttoppos")
        self.horizontalLayout_lefttop.addWidget(self.label_lefttoppos)
        #self.label_lefttoppos.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框
        self.verticalLayout_right_2.addLayout(self.horizontalLayout_lefttop)
        self.horizontalLayout_righttop = QtWidgets.QHBoxLayout()
        self.horizontalLayout_righttop.setObjectName("horizontalLayout_righttop")

        # 右上点坐标提示框
        self.label_righttop = QtWidgets.QLabel(self.centralwidget)
        self.label_righttop.setMinimumSize(QtCore.QSize(100, 60))
        self.label_righttop.setMaximumSize(QtCore.QSize(100, 60))
        self.label_righttop.setStyleSheet(
            "QLabel{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_righttop.setObjectName("label_righttop")
        self.horizontalLayout_righttop.addWidget(self.label_righttop)
        #self.label_righttop.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框

        # 右上点坐标显示框
        self.label_righttoppos = QtWidgets.QLabel(self.centralwidget)
        self.label_righttoppos.setMinimumSize(QtCore.QSize(130, 60))
        self.label_righttoppos.setMaximumSize(QtCore.QSize(130, 60))
        self.label_righttoppos.setStyleSheet(
            "QLabel{background-color: rgb(255, 204, 229)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_righttoppos.setText("")
        self.label_righttoppos.setObjectName("label_righttoppos")
        self.horizontalLayout_righttop.addWidget(self.label_righttoppos)
        #self.label_righttoppos.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框

        self.verticalLayout_right_2.addLayout(self.horizontalLayout_righttop)
        self.horizontalLayout_leftbottom = QtWidgets.QHBoxLayout()
        self.horizontalLayout_leftbottom.setObjectName("horizontalLayout_leftbottom")

        # 左下点坐标提示框
        self.label_leftbottom = QtWidgets.QLabel(self.centralwidget)
        self.label_leftbottom.setMinimumSize(QtCore.QSize(100, 60))
        self.label_leftbottom.setMaximumSize(QtCore.QSize(100, 60))
        self.label_leftbottom.setStyleSheet(
            "QLabel{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_leftbottom.setObjectName("label_leftbottom")
        self.horizontalLayout_leftbottom.addWidget(self.label_leftbottom)
        #self.label_leftbottom.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框

        # 左下点坐标显示框
        self.label_leftbottompos = QtWidgets.QLabel(self.centralwidget)
        self.label_leftbottompos.setMinimumSize(QtCore.QSize(130, 60))
        self.label_leftbottompos.setMaximumSize(QtCore.QSize(130, 60))
        self.label_leftbottompos.setStyleSheet(
            "QLabel{background-color: rgb(255, 204, 229)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_leftbottompos.setText("")
        self.label_leftbottompos.setObjectName("label_leftbottompos")
        self.horizontalLayout_leftbottom.addWidget(self.label_leftbottompos)
        #self.label_leftbottompos.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框
        self.verticalLayout_right_2.addLayout(self.horizontalLayout_leftbottom)
        self.horizontalLayout_rightbottom = QtWidgets.QHBoxLayout()
        self.horizontalLayout_rightbottom.setObjectName("horizontalLayout_rightbottom")

        # 右下点坐标提示框
        self.label_rightbottom = QtWidgets.QLabel(self.centralwidget)
        self.label_rightbottom.setMinimumSize(QtCore.QSize(100, 60))
        self.label_rightbottom.setMaximumSize(QtCore.QSize(100, 60))
        self.label_rightbottom.setStyleSheet(
            "QLabel{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_rightbottom.setObjectName("label_rightbottom")
        self.horizontalLayout_rightbottom.addWidget(self.label_rightbottom)
        #self.label_rightbottom.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框

        # 右下点坐标显示框
        self.label_rightbottompos = QtWidgets.QLabel(self.centralwidget)
        self.label_rightbottompos.setMinimumSize(QtCore.QSize(130, 60))
        self.label_rightbottompos.setMaximumSize(QtCore.QSize(130, 60))
        self.label_rightbottompos.setStyleSheet(
            "QLabel{background-color: rgb(255, 204, 229)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_rightbottompos.setText("")
        self.label_rightbottompos.setObjectName("label_rightbottompos")
        self.horizontalLayout_rightbottom.addWidget(self.label_rightbottompos)
        #self.label_rightbottompos.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框

        self.verticalLayout_right_2.addLayout(self.horizontalLayout_rightbottom)
        self.horizontalLayout_center = QtWidgets.QHBoxLayout()
        self.horizontalLayout_center.setObjectName("horizontalLayout_center")

        # 中心点坐标提示框
        self.label_center = QtWidgets.QLabel(self.centralwidget)
        self.label_center.setMinimumSize(QtCore.QSize(100, 60))
        self.label_center.setMaximumSize(QtCore.QSize(100, 60))
        self.label_center.setStyleSheet(
            "QLabel{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_center.setObjectName("label_center")
        self.horizontalLayout_center.addWidget(self.label_center)
        #self.label_center.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框

        # 中心点坐标显示框
        self.label_centerpos = QtWidgets.QLabel(self.centralwidget)
        self.label_centerpos.setMinimumSize(QtCore.QSize(130, 60))
        self.label_centerpos.setMaximumSize(QtCore.QSize(130, 60))
        self.label_centerpos.setStyleSheet(
            "QLabel{background-color: rgb(255, 204, 229)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_centerpos.setText("")
        self.label_centerpos.setObjectName("label_centerpos")
        self.horizontalLayout_center.addWidget(self.label_centerpos)
        #self.label_centerpos.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框
        self.verticalLayout_right_2.addLayout(self.horizontalLayout_center)
        self.horizontalLayout_currentpt = QtWidgets.QHBoxLayout()
        self.horizontalLayout_currentpt.setObjectName("horizontalLayout_currentpt")

        # 当前权重提示框
        self.label_currentptleft = QtWidgets.QLabel(self.centralwidget)
        self.label_currentptleft.setMinimumSize(QtCore.QSize(100, 60))
        self.label_currentptleft.setMaximumSize(QtCore.QSize(100, 60))
        self.label_currentptleft.setStyleSheet(
            "QLabel{background-color: rgb(111, 180, 219)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_currentptleft.setObjectName("label_currentptleft")
        self.horizontalLayout_currentpt.addWidget(self.label_currentptleft)
        #self.label_currentptleft.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框

        # 当前权重显示框
        self.label_currentpt = QtWidgets.QLabel(self.centralwidget)
        self.label_currentpt.setMinimumSize(QtCore.QSize(130, 60))
        self.label_currentpt.setMaximumSize(QtCore.QSize(130, 60))
        self.label_currentpt.setStyleSheet(
            "QLabel{background-color: rgb(255, 204, 229)}"  # 按键背景色
            "QLabel{color: rgb(93, 109, 126); font-weight: bold}"  # 字体颜色形状
            "QLabel{border-radius: 6px}"  # 圆角半径
            "QLabel:hover{color: rgb(39, 55, 70); font-weight: bold;}"  # 光标移动到上面后的字体颜色形状
            "QLabel:pressed{background-color: rgb(23, 32, 42); font-weight: bold; color: rgb(135, 54, 0)}"
            # 按下时的样式
        )
        self.label_currentpt.setText("")
        self.label_currentpt.setObjectName("label_currentpt")
        self.horizontalLayout_currentpt.addWidget(self.label_currentpt)
        #self.label_currentpt.setStyleSheet("border: 1px solid white;")  # 添加显示区域边框
        self.verticalLayout_right_2.addLayout(self.horizontalLayout_currentpt)
        self.verticalLayout_rightall.addLayout(self.verticalLayout_right_2)
        self.horizontalLayout_all.addLayout(self.verticalLayout_rightall)
        self.gridLayout.addLayout(self.horizontalLayout_all, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1125, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "YOLOv5检测界面"))
        self.pushButton_selectpt.setText(_translate("MainWindow", "选择权重"))
        self.pushButton_img.setText(_translate("MainWindow", "单图片检测"))
        self.pushButton_imgfolder.setText(_translate("MainWindow", "文件夹检测"))
        self.pushButton_video.setText(_translate("MainWindow", "视频检测"))
        self.pushButton_camera.setText(_translate("MainWindow", "摄像头检测"))
        self.pushButton_stop.setText(_translate("MainWindow", "停止检测"))
        self.pushButton_savefolder.setText(_translate("MainWindow", "打开保存路径"))
        self.label_display.setText(_translate("MainWindow", "展示区域"))
        self.label_infooutput.setText(_translate("MainWindow", "信息输出区域"))
        self.label_clsleft.setText(_translate("MainWindow", "预测类别为："))
        self.label_prbleft.setText(_translate("MainWindow", "预测概率为："))
        self.label_lefttop.setText(_translate("MainWindow", "左上点坐标："))
        self.label_righttop.setText(_translate("MainWindow", "右上点坐标："))
        self.label_leftbottom.setText(_translate("MainWindow", "左下点坐标："))
        self.label_rightbottom.setText(_translate("MainWindow", "右下点坐标："))
        self.label_center.setText(_translate("MainWindow", "中心点坐标："))
        self.label_currentptleft.setText(_translate("MainWindow", "当前权重："))

    def init_slots(self):
        self.pushButton_selectpt.clicked.connect(self.button_model_open)
        self.pushButton_img.clicked.connect(self.button_image_open)
        self.pushButton_imgfolder.clicked.connect(self.button_imagefolder_open)
        self.pushButton_video.clicked.connect(self.button_video_open)
        self.pushButton_camera.clicked.connect(self.button_camera_open)
        self.pushButton_savefolder.clicked.connect(self.button_save_folder)
        self.pushButton_stop.clicked.connect(self.button_stop_detect)

        self.timer_video.timeout.connect(self.show_video_frame)

    def init_logo(self):
        pix = QtGui.QPixmap('')  # 绘制初始化图片
        self.label_display.setScaledContents(True)
        self.label_display.setPixmap(pix)

    # 退出提示
    def closeEvent(self, event):
        reply = QtWidgets.QMessageBox.question(self, 'Message',
                                               "Are you sure to quit?", QtWidgets.QMessageBox.Yes |
                                               QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

    # 停止检测函数
    def button_stop_detect(self):
        reply = QtWidgets.QMessageBox.question(self, 'Message',
                                               "Are you sure to quit?", QtWidgets.QMessageBox.Yes |
                                               QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            self.close()
        else:
            pass

    # 选择权重函数
    def button_model_open(self):
        fileName, fileType = QFileDialog.getOpenFileName(self, '选取文件', '.', 'PT (*.pt);;ONNX (*.onnx)')
        print(fileName)

        if fileName != '':
            # read cfg
            with open('C:/PythonProject/PycharmProject/yolov5-70--py-qt5-master/model.yaml') as f:
                cfg = yaml.load(f, Loader=yaml.SafeLoader)
            # update model_path
            cfg['model_path'] = fileName
            weights = cfg['model_path']
        else:
            weights = 'C:/PythonProject/PycharmProject/yolov5-70--py-qt5-master/weights/yolov5n.pt'
        self.model = DetectMultiBackend(weights, device=self.device)  #更换权重文件
        self.label_infooutput.setText('成功切换权重文件为' + weights.split('/')[-1])
        self.label_currentpt.setText(weights.split('/')[-1])

    # 单图片检测函数
    def button_image_open(self):
        print('打开图片')
        name_list = []

        img_name, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "打开图片", "", "*.jpg;;*.png;;All Files(*)")
        if not img_name:
            self.empty_information()
            print('empty!')
            return
        img = cv2.imread(img_name)
        print(img_name)
        showimg = img
        with torch.no_grad():
            img = letterbox(img, new_shape=self.imgsz)[0]
            # Convert
            # BGR to RGB, to 3x416x416
            img = img[:, :, ::-1].transpose(2, 0, 1)
            img = np.ascontiguousarray(img)
            img = torch.from_numpy(img).to(self.device)
            img = img.half() if self.half else img.float()  # uint8 to fp16/32
            img /= 255.0  # 0 - 255 to 0.0 - 1.0
            if img.ndimension() == 3:
                img = img.unsqueeze(0)
            # Inference
            pred = self.model(img)[0]
            # Apply NMS
            pred = non_max_suppression(pred, self.conf_thres, self.iou_thres)
            # Process detections
            for i, det in enumerate(pred):
                if det is not None and len(det):
                    # Rescale boxes from img_size to im0 size
                    det[:, :4] = scale_boxes(
                        img.shape[2:], det[:, :4], showimg.shape).round()

                    for *xyxy, conf, cls in reversed(det):
                        c1, c2 = (int(xyxy[0]), int(xyxy[1])), (int(xyxy[2]), int(xyxy[3]))
                        label = '%s %.2f' % (self.names[int(cls)], conf)
                        #self.label_cls.setText(str(int(cls)))
                        self.label_cls.setText(label.split()[0])
                        self.label_cls.repaint()
                        self.label_prb.setText(str(conf.cpu().numpy()))
                        self.label_prb.repaint()
                        self.label_lefttoppos.setText('(' + str(c1[0]) + ',' + str(c1[1]) + ')')
                        self.label_lefttoppos.repaint()
                        self.label_righttoppos.setText('(' + str(c2[0]) + ',' + str(c1[1]) + ')')
                        self.label_righttoppos.repaint()
                        self.label_leftbottompos.setText('(' + str(c1[0]) + ',' + str(c2[1]) + ')')
                        self.label_leftbottompos.repaint()
                        self.label_rightbottompos.setText('(' + str(c2[0]) + ',' + str(c2[1]) + ')')
                        self.label_rightbottompos.repaint()
                        self.label_centerpos.setText(
                            '(' + str((c2[0] - c1[0]) / 2 + c1[0]) + ',' + str((c2[1] - c1[1]) / 2 + c1[1]) + ')')
                        self.label_centerpos.repaint()
                        print(label.split()[0])  # 打印各目标名称
                        name_list.append(self.names[int(cls)])
                        plot_one_box(xyxy, showimg, label=label,
                                     color=self.colors[int(cls)], line_thickness=2)

        cv2.imwrite(str(Path(self.save_file / 'prediction.jpg')), showimg)
        self.result = cv2.cvtColor(showimg, cv2.COLOR_BGR2BGRA)
        self.result = cv2.resize(self.result, (640, 480), interpolation=cv2.INTER_AREA)
        self.QtImg = QtGui.QImage(self.result.data, self.result.shape[1], self.result.shape[0],
                                  QtGui.QImage.Format_RGB32)
        self.label_display.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))
        print('单图片检测完成')

    # 图片文件夹检测函数
    def button_imagefolder_open(self):
        print('打开图片文件夹')

        file_name = QtWidgets.QFileDialog.getExistingDirectory(
            self, "打开图片文件夹", "")
        if not file_name:
            self.empty_information()
            print('empty!')
            return
        print(file_name)
        img_names = os.listdir(file_name)
        if len(img_names) == 0:
            self.empty_information()
            print('empty!')
            return
        index = 0
        for img_name in img_names:
            if img_name.split('.')[-1] not in ('jpg', 'png', 'jpeg'):
                continue
            name_list = []
            img = cv2.imread(os.path.join(file_name, img_name))
            print(img_name)
            showimg = img
            with torch.no_grad():
                img = letterbox(img, new_shape=self.imgsz)[0]
                # Convert
                # BGR to RGB, to 3x416x416
                img = img[:, :, ::-1].transpose(2, 0, 1)
                img = np.ascontiguousarray(img)
                img = torch.from_numpy(img).to(self.device)
                img = img.half() if self.half else img.float()  # uint8 to fp16/32
                img /= 255.0  # 0 - 255 to 0.0 - 1.0
                if img.ndimension() == 3:
                    img = img.unsqueeze(0)
                # Inference
                pred = self.model(img)[0]
                # Apply NMS
                pred = non_max_suppression(pred, self.conf_thres, self.iou_thres)
                # Process detections
                for i, det in enumerate(pred):
                    if det is not None and len(det):
                        # Rescale boxes from img_size to im0 size
                        det[:, :4] = scale_boxes(
                            img.shape[2:], det[:, :4], showimg.shape).round()

                        for *xyxy, conf, cls in reversed(det):
                            c1, c2 = (int(xyxy[0]), int(xyxy[1])), (int(xyxy[2]), int(xyxy[3]))
                            label = '%s %.2f' % (self.names[int(cls)], conf)
                            # self.label_cls.setText(str(int(cls)))
                            self.label_cls.setText(label.split()[0])
                            self.label_cls.repaint()
                            self.label_prb.setText(str(conf.cpu().numpy()))
                            self.label_prb.repaint()
                            self.label_lefttoppos.setText('(' + str(c1[0]) + ',' + str(c1[1]) + ')')
                            self.label_lefttoppos.repaint()
                            self.label_righttoppos.setText('(' + str(c2[0]) + ',' + str(c1[1]) + ')')
                            self.label_righttoppos.repaint()
                            self.label_leftbottompos.setText('(' + str(c1[0]) + ',' + str(c2[1]) + ')')
                            self.label_leftbottompos.repaint()
                            self.label_rightbottompos.setText('(' + str(c2[0]) + ',' + str(c2[1]) + ')')
                            self.label_rightbottompos.repaint()
                            self.label_centerpos.setText(
                                '(' + str((c2[0] - c1[0]) / 2 + c1[0]) + ',' + str((c2[1] - c1[1]) / 2 + c1[1]) + ')')
                            self.label_centerpos.repaint()
                            print(label.split()[0])  # 打印各目标名称
                            name_list.append(self.names[int(cls)])
                            plot_one_box(xyxy, showimg, label=label,
                                         color=self.colors[int(cls)], line_thickness=2)

            cv2.imwrite(str(Path(self.save_file / 'prediction_file{}.jpg'.format(index))), showimg)
            self.result = cv2.cvtColor(showimg, cv2.COLOR_BGR2BGRA)
            self.result = cv2.resize(self.result, (640, 480), interpolation=cv2.INTER_AREA)
            self.QtImg = QtGui.QImage(self.result.data, self.result.shape[1], self.result.shape[0],
                                      QtGui.QImage.Format_RGB32)
            self.label_display.setPixmap(QtGui.QPixmap.fromImage(self.QtImg))
            index += 1
        print('文件夹图片检测完成')

    # 视频检测函数
    def button_video_open(self):
        video_name, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "打开视频", "", "*.mp4;;*.avi;;All Files(*)")

        if not video_name:
            self.empty_information()
            print('empty!')
            return

        flag = self.cap.open(video_name)
        if flag == False:
            QtWidgets.QMessageBox.warning(
                self, u"Warning", u"打开视频失败", buttons=QtWidgets.QMessageBox.Ok,
                defaultButton=QtWidgets.QMessageBox.Ok)
        else:
            self.out = cv2.VideoWriter(str(Path(self.save_file / 'vedio_prediction.avi')), cv2.VideoWriter_fourcc(
                *'MJPG'), 20, (int(self.cap.get(3)), int(self.cap.get(4))))
            self.timer_video.start(30)
            self.pushButton_video.setDisabled(True)
            self.pushButton_img.setDisabled(True)
            self.pushButton_camera.setDisabled(True)

    # 摄像头检测函数
    def button_camera_open(self):
        if not self.timer_video.isActive():
            # 默认使用第一个本地camera
            flag = self.cap.open(0)
            if flag == False:
                QtWidgets.QMessageBox.warning(
                    self, u"Warning", u"打开摄像头失败", buttons=QtWidgets.QMessageBox.Ok,
                    defaultButton=QtWidgets.QMessageBox.Ok)
            else:
                self.out = cv2.VideoWriter(str(Path(self.save_file / 'camera_prediction.avi')),
                                           cv2.VideoWriter_fourcc(
                                               *'MJPG'), 20, (int(self.cap.get(3)), int(self.cap.get(4))))
                self.timer_video.start(30)
                self.pushButton_video.setDisabled(True)
                self.pushButton_img.setDisabled(True)
                self.pushButton_camera.setText(u"关闭摄像头")
        else:
            self.timer_video.stop()
            self.cap.release()
            self.out.release()
            self.label_display.clear()
            self.init_logo()
            self.pushButton_video.setDisabled(False)
            self.pushButton_img.setDisabled(False)
            self.pushButton_camera.setText(u"摄像头检测")

    # 打开保存文件夹函数
    def button_save_folder(self):
        path = self.save_file
        os.system(f"start explorer {path}")

    def show_video_frame(self):
        name_list = []

        flag, img = self.cap.read()
        if img is not None:
            showimg = img
            with torch.no_grad():
                img = letterbox(img, new_shape=self.imgsz)[0]
                # Convert
                # BGR to RGB, to 3x416x416
                img = img[:, :, ::-1].transpose(2, 0, 1)
                img = np.ascontiguousarray(img)
                img = torch.from_numpy(img).to(self.device)
                img = img.half() if self.half else img.float()  # uint8 to fp16/32
                img /= 255.0  # 0 - 255 to 0.0 - 1.0
                if img.ndimension() == 3:
                    img = img.unsqueeze(0)
                # Inference
                pred = self.model(img)[0]

                # Apply NMS
                pred = non_max_suppression(pred, self.conf_thres, self.iou_thres)
                # Process detections
                for i, det in enumerate(pred):  # detections per image
                    if det is not None and len(det):
                        # Rescale boxes from img_size to im0 size
                        det[:, :4] = scale_boxes(
                            img.shape[2:], det[:, :4], showimg.shape).round()
                        # Write results
                        for *xyxy, conf, cls in reversed(det):
                            c1, c2 = (int(xyxy[0]), int(xyxy[1])), (int(xyxy[2]), int(xyxy[3]))
                            label = '%s %.2f' % (self.names[int(cls)], conf)
                            # self.label_cls.setText(str(int(cls)))
                            self.label_cls.setText(label.split()[0])
                            self.label_cls.repaint()
                            self.label_prb.setText(str(conf.cpu().numpy()))
                            self.label_prb.repaint()
                            self.label_lefttoppos.setText('(' + str(c1[0]) + ',' + str(c1[1]) + ')')
                            self.label_lefttoppos.repaint()
                            self.label_righttoppos.setText('(' + str(c2[0]) + ',' + str(c1[1]) + ')')
                            self.label_righttoppos.repaint()
                            self.label_leftbottompos.setText('(' + str(c1[0]) + ',' + str(c2[1]) + ')')
                            self.label_leftbottompos.repaint()
                            self.label_rightbottompos.setText('(' + str(c2[0]) + ',' + str(c2[1]) + ')')
                            self.label_rightbottompos.repaint()
                            self.label_centerpos.setText(
                                '(' + str((c2[0] - c1[0]) / 2 + c1[0]) + ',' + str((c2[1] - c1[1]) / 2 + c1[1]) + ')')
                            self.label_centerpos.repaint()
                            name_list.append(self.names[int(cls)])
                            print(label)  # 打印各目标+置信度
                            plot_one_box(
                                xyxy, showimg, label=label, color=self.colors[int(cls)], line_thickness=2)

            self.out.write(showimg)
            show = cv2.resize(showimg, (640, 480))
            self.result = cv2.cvtColor(show, cv2.COLOR_BGR2RGB)
            showImage = QtGui.QImage(self.result.data, self.result.shape[1], self.result.shape[0],
                                     QtGui.QImage.Format_RGB888)
            self.label_display.setPixmap(QtGui.QPixmap.fromImage(showImage))

        else:
            self.timer_video.stop()
            self.cap.release()
            self.out.release()
            self.label_display.clear()
            self.pushButton_video.setDisabled(False)
            self.pushButton_img.setDisabled(False)
            self.pushButton_camera.setDisabled(False)
            self.init_logo()

    def empty_information(self):
        QtWidgets.QMessageBox.information(self, '提示', '未选择文件或选择文件为空!', QtWidgets.QMessageBox.Cancel)




if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
    ui = Ui_MainWindow()
    # 设置窗口透明度
    ui.setWindowOpacity(0.93)
    # 去除顶部边框
    # ui.setWindowFlags(Qt.FramelessWindowHint)
    # 设置窗口图标
    icon = QIcon()
    icon.addPixmap(QPixmap("C:/PythonProject/PycharmProject/yolov5-70--py-qt5-master/UI/icon.ico"), QIcon.Normal, QIcon.Off)
    # 设置应用图标
    ui.setWindowIcon(icon)
    ui.show()
    sys.exit(app.exec_())

